// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PeggyBootstrapProposal struct {
	Title                string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	PeggyId              string `protobuf:"bytes,3,opt,name=peggy_id,json=peggyId,proto3" json:"peggy_id,omitempty" yaml:"peggy_id"`
	ProxyContractHash    string `protobuf:"bytes,4,opt,name=proxy_contract_hash,json=proxyContractHash,proto3" json:"proxy_contract_hash,omitempty" yaml:"proxy_contract_hash"`
	ProxyContractAddress string `protobuf:"bytes,5,opt,name=proxy_contract_address,json=proxyContractAddress,proto3" json:"proxy_contract_address,omitempty" yaml:"proxy_contract_address"`
	LogicContractHash    string `protobuf:"bytes,6,opt,name=logic_contract_hash,json=logicContractHash,proto3" json:"logic_contract_hash,omitempty" yaml:"logic_contract_hash"`
	LogicContractAddress string `protobuf:"bytes,7,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty" yaml:"logic_contract_address"`
	StartThreshold       string `protobuf:"bytes,8,opt,name=start_threshold,json=startThreshold,proto3" json:"start_threshold,omitempty" yaml:"start_threshold"`
	BridgeChainId        string `protobuf:"bytes,9,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty" yaml:"bridge_chain_id"`
	BootstrapValsetNonce string `protobuf:"bytes,10,opt,name=bootstrap_valset_nonce,json=bootstrapValsetNonce,proto3" json:"bootstrap_valset_nonce,omitempty" yaml:"bootstrap_valset_nonce"`
}

func (m *PeggyBootstrapProposal) Reset()      { *m = PeggyBootstrapProposal{} }
func (*PeggyBootstrapProposal) ProtoMessage() {}
func (*PeggyBootstrapProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc2223322177c81, []int{0}
}
func (m *PeggyBootstrapProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggyBootstrapProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggyBootstrapProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggyBootstrapProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggyBootstrapProposal.Merge(m, src)
}
func (m *PeggyBootstrapProposal) XXX_Size() int {
	return m.Size()
}
func (m *PeggyBootstrapProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggyBootstrapProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PeggyBootstrapProposal proto.InternalMessageInfo

type PeggyBootstrapProposalWithDeposit struct {
	Title                string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	PeggyId              string `protobuf:"bytes,3,opt,name=peggy_id,json=peggyId,proto3" json:"peggy_id,omitempty" yaml:"peggy_id"`
	ProxyContractHash    string `protobuf:"bytes,4,opt,name=proxy_contract_hash,json=proxyContractHash,proto3" json:"proxy_contract_hash,omitempty" yaml:"proxy_contract_hash"`
	ProxyContractAddress string `protobuf:"bytes,5,opt,name=proxy_contract_address,json=proxyContractAddress,proto3" json:"proxy_contract_address,omitempty" yaml:"proxy_contract_address"`
	LogicContractHash    string `protobuf:"bytes,6,opt,name=logic_contract_hash,json=logicContractHash,proto3" json:"logic_contract_hash,omitempty" yaml:"logic_contract_hash"`
	LogicContractAddress string `protobuf:"bytes,7,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty" yaml:"logic_contract_address"`
	StartThreshold       string `protobuf:"bytes,8,opt,name=start_threshold,json=startThreshold,proto3" json:"start_threshold,omitempty" yaml:"start_threshold"`
	BridgeChainId        string `protobuf:"bytes,9,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty" yaml:"bridge_chain_id"`
	BootstrapValsetNonce string `protobuf:"bytes,10,opt,name=bootstrap_valset_nonce,json=bootstrapValsetNonce,proto3" json:"bootstrap_valset_nonce,omitempty" yaml:"bootstrap_valset_nonce"`
	Deposit              string `protobuf:"bytes,11,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *PeggyBootstrapProposalWithDeposit) Reset()         { *m = PeggyBootstrapProposalWithDeposit{} }
func (m *PeggyBootstrapProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*PeggyBootstrapProposalWithDeposit) ProtoMessage()    {}
func (*PeggyBootstrapProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc2223322177c81, []int{1}
}
func (m *PeggyBootstrapProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggyBootstrapProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggyBootstrapProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggyBootstrapProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggyBootstrapProposalWithDeposit.Merge(m, src)
}
func (m *PeggyBootstrapProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *PeggyBootstrapProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggyBootstrapProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_PeggyBootstrapProposalWithDeposit proto.InternalMessageInfo

type PeggyUpgradeProposal struct {
	Title                string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Version              string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" yaml:"version"`
	LogicContractHash    string `protobuf:"bytes,4,opt,name=logic_contract_hash,json=logicContractHash,proto3" json:"logic_contract_hash,omitempty" yaml:"logic_contract_hash"`
	LogicContractAddress string `protobuf:"bytes,5,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty" yaml:"logic_contract_address"`
}

func (m *PeggyUpgradeProposal) Reset()      { *m = PeggyUpgradeProposal{} }
func (*PeggyUpgradeProposal) ProtoMessage() {}
func (*PeggyUpgradeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc2223322177c81, []int{2}
}
func (m *PeggyUpgradeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggyUpgradeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggyUpgradeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggyUpgradeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggyUpgradeProposal.Merge(m, src)
}
func (m *PeggyUpgradeProposal) XXX_Size() int {
	return m.Size()
}
func (m *PeggyUpgradeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggyUpgradeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PeggyUpgradeProposal proto.InternalMessageInfo

type PeggyUpgradeProposalWithDeposit struct {
	Title                string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Version              string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" yaml:"version"`
	LogicContractHash    string `protobuf:"bytes,4,opt,name=logic_contract_hash,json=logicContractHash,proto3" json:"logic_contract_hash,omitempty" yaml:"logic_contract_hash"`
	LogicContractAddress string `protobuf:"bytes,5,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty" yaml:"logic_contract_address"`
	Deposit              string `protobuf:"bytes,6,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *PeggyUpgradeProposalWithDeposit) Reset()         { *m = PeggyUpgradeProposalWithDeposit{} }
func (m *PeggyUpgradeProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*PeggyUpgradeProposalWithDeposit) ProtoMessage()    {}
func (*PeggyUpgradeProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fc2223322177c81, []int{3}
}
func (m *PeggyUpgradeProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeggyUpgradeProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeggyUpgradeProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeggyUpgradeProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeggyUpgradeProposalWithDeposit.Merge(m, src)
}
func (m *PeggyUpgradeProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *PeggyUpgradeProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_PeggyUpgradeProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_PeggyUpgradeProposalWithDeposit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PeggyBootstrapProposal)(nil), "peggy.v1.PeggyBootstrapProposal")
	proto.RegisterType((*PeggyBootstrapProposalWithDeposit)(nil), "peggy.v1.PeggyBootstrapProposalWithDeposit")
	proto.RegisterType((*PeggyUpgradeProposal)(nil), "peggy.v1.PeggyUpgradeProposal")
	proto.RegisterType((*PeggyUpgradeProposalWithDeposit)(nil), "peggy.v1.PeggyUpgradeProposalWithDeposit")
}

func init() { proto.RegisterFile("peggy/v1/proposal.proto", fileDescriptor_2fc2223322177c81) }

var fileDescriptor_2fc2223322177c81 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x31, 0x6f, 0xd3, 0x4e,
	0x1c, 0xb5, 0xdb, 0x26, 0x69, 0xaf, 0xfd, 0xb7, 0xff, 0xba, 0x51, 0xb0, 0x2a, 0x61, 0xd3, 0x1b,
	0x10, 0x43, 0x89, 0xa9, 0x58, 0x50, 0x37, 0x52, 0x06, 0xca, 0x50, 0x55, 0x27, 0xa0, 0x12, 0x8b,
	0x75, 0xb1, 0x4f, 0xb6, 0x25, 0xc7, 0x67, 0xdd, 0x5d, 0xa3, 0xe6, 0x1b, 0x30, 0x22, 0x26, 0xc6,
	0xf0, 0x6d, 0x18, 0x3b, 0xb2, 0x60, 0xa1, 0x64, 0x61, 0x60, 0xf2, 0x27, 0x40, 0x3e, 0xdb, 0x28,
	0x3d, 0xcc, 0x80, 0x40, 0x95, 0x40, 0xdd, 0x9c, 0xf7, 0xde, 0xef, 0xe9, 0xf9, 0xf2, 0xee, 0x7c,
	0xe0, 0x56, 0x4a, 0x82, 0x60, 0xe2, 0x8c, 0x0f, 0x9c, 0x94, 0xd1, 0x94, 0x72, 0x1c, 0xf7, 0x53,
	0x46, 0x05, 0x35, 0x56, 0x25, 0xd1, 0x1f, 0x1f, 0xec, 0x76, 0x03, 0x1a, 0x50, 0x09, 0x3a, 0xc5,
	0x53, 0xc9, 0xc3, 0xaf, 0x2d, 0xd0, 0x3b, 0x2d, 0x24, 0x03, 0x4a, 0x05, 0x17, 0x0c, 0xa7, 0xa7,
	0x95, 0x81, 0x71, 0x17, 0xb4, 0x44, 0x24, 0x62, 0x62, 0xea, 0x77, 0xf4, 0x7b, 0x6b, 0x83, 0xff,
	0xf3, 0xcc, 0xde, 0x98, 0xe0, 0x51, 0x7c, 0x08, 0x25, 0x0c, 0x51, 0x49, 0x1b, 0x8f, 0xc0, 0xba,
	0x4f, 0xb8, 0xc7, 0xa2, 0x54, 0x44, 0x34, 0x31, 0x97, 0xa4, 0xba, 0x97, 0x67, 0xb6, 0x51, 0xaa,
	0x17, 0x48, 0x88, 0x16, 0xa5, 0x46, 0x1f, 0x94, 0xf1, 0xdc, 0xc8, 0x37, 0x97, 0xe5, 0xd8, 0x4e,
	0x9e, 0xd9, 0x5b, 0xe5, 0x58, 0xcd, 0x40, 0xd4, 0x91, 0x8f, 0xc7, 0xbe, 0x71, 0x02, 0x76, 0x52,
	0x46, 0x2f, 0x26, 0xae, 0x47, 0x13, 0xc1, 0xb0, 0x27, 0xdc, 0x10, 0xf3, 0xd0, 0x5c, 0x91, 0xa3,
	0x56, 0x9e, 0xd9, 0xbb, 0xd5, 0xe8, 0x8f, 0x22, 0x88, 0xb6, 0x25, 0x7a, 0x54, 0x81, 0x4f, 0x31,
	0x0f, 0x8d, 0x33, 0xd0, 0x53, 0xa4, 0xd8, 0xf7, 0x19, 0xe1, 0xdc, 0x6c, 0x49, 0xcb, 0xbd, 0x3c,
	0xb3, 0x6f, 0x37, 0x5a, 0x56, 0x3a, 0x88, 0xba, 0x57, 0x5c, 0x1f, 0x97, 0x70, 0x11, 0x34, 0xa6,
	0x41, 0xe4, 0x29, 0x41, 0xdb, 0x6a, 0xd0, 0x06, 0x11, 0x44, 0xdb, 0x12, 0x55, 0x83, 0x2a, 0xd2,
	0x3a, 0x68, 0x47, 0x0d, 0xda, 0xac, 0x83, 0xa8, 0x7b, 0xc5, 0xb5, 0x0e, 0x7a, 0x04, 0xb6, 0xb8,
	0xc0, 0x4c, 0xb8, 0x22, 0x64, 0x84, 0x87, 0x34, 0xf6, 0xcd, 0x55, 0xe9, 0xb8, 0x9b, 0x67, 0x76,
	0xaf, 0x74, 0x54, 0x04, 0x10, 0x6d, 0x4a, 0xe4, 0x79, 0x0d, 0x18, 0x03, 0xb0, 0x35, 0x64, 0x91,
	0x1f, 0x10, 0xd7, 0x0b, 0x71, 0x94, 0x14, 0xff, 0xe6, 0x9a, 0x6a, 0xa2, 0x08, 0x20, 0xfa, 0xaf,
	0x44, 0x8e, 0x0a, 0xe0, 0xd8, 0x2f, 0xde, 0x70, 0x58, 0x37, 0xd0, 0x1d, 0xe3, 0x98, 0x13, 0xe1,
	0x26, 0x34, 0xf1, 0x88, 0x09, 0xd4, 0x37, 0x6c, 0xd6, 0x41, 0xd4, 0xfd, 0x4e, 0xbc, 0x94, 0xf8,
	0x49, 0x01, 0x1f, 0x6e, 0xbc, 0x9e, 0xda, 0xda, 0xbb, 0xa9, 0xad, 0x7d, 0x99, 0xda, 0x1a, 0x7c,
	0xdf, 0x06, 0x7b, 0xcd, 0x75, 0x3f, 0x8b, 0x44, 0xf8, 0x84, 0xa4, 0x94, 0x47, 0xe2, 0xa6, 0xf9,
	0x37, 0xcd, 0xff, 0xfb, 0x9b, 0x6f, 0xec, 0x83, 0x8e, 0x5f, 0x16, 0xda, 0x5c, 0x97, 0x4e, 0x46,
	0x9e, 0xd9, 0x9b, 0x75, 0x33, 0x25, 0x01, 0x51, 0x2d, 0x39, 0x5c, 0xad, 0xf6, 0x89, 0x0e, 0x3f,
	0x2d, 0x81, 0xae, 0xdc, 0x23, 0x2f, 0xd2, 0x80, 0x61, 0x9f, 0x5c, 0xe3, 0x07, 0x61, 0x1f, 0x74,
	0xc6, 0x84, 0xf1, 0x62, 0x6a, 0x59, 0x8d, 0x5c, 0x11, 0x10, 0xd5, 0x92, 0x9f, 0x75, 0x6d, 0xe5,
	0xcf, 0x77, 0xad, 0xf5, 0x5b, 0x5d, 0x53, 0xce, 0xa0, 0xb7, 0xcb, 0xc0, 0x6e, 0x5a, 0xdf, 0xeb,
	0x3d, 0x81, 0xfe, 0xcd, 0xa5, 0x5e, 0x2c, 0x7d, 0xfb, 0x17, 0x4a, 0x3f, 0x78, 0xf6, 0x61, 0x66,
	0xe9, 0x97, 0x33, 0x4b, 0xff, 0x3c, 0xb3, 0xf4, 0x37, 0x73, 0x4b, 0xbb, 0x9c, 0x5b, 0xda, 0xc7,
	0xb9, 0xa5, 0xbd, 0x7a, 0x10, 0x44, 0x22, 0x3c, 0x1f, 0xf6, 0x3d, 0x3a, 0x72, 0x70, 0x2c, 0x42,
	0x82, 0xef, 0x27, 0x44, 0x38, 0xe5, 0x85, 0x6b, 0x44, 0xfd, 0xf3, 0x98, 0x38, 0x17, 0xd5, 0x4f,
	0x31, 0x49, 0x09, 0x1f, 0xb6, 0xe5, 0xd5, 0xea, 0xe1, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c,
	0x62, 0x9d, 0x02, 0x95, 0x09, 0x00, 0x00,
}

func (m *PeggyBootstrapProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggyBootstrapProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggyBootstrapProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BootstrapValsetNonce) > 0 {
		i -= len(m.BootstrapValsetNonce)
		copy(dAtA[i:], m.BootstrapValsetNonce)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.BootstrapValsetNonce)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StartThreshold) > 0 {
		i -= len(m.StartThreshold)
		copy(dAtA[i:], m.StartThreshold)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.StartThreshold)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LogicContractHash) > 0 {
		i -= len(m.LogicContractHash)
		copy(dAtA[i:], m.LogicContractHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProxyContractAddress) > 0 {
		i -= len(m.ProxyContractAddress)
		copy(dAtA[i:], m.ProxyContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProxyContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProxyContractHash) > 0 {
		i -= len(m.ProxyContractHash)
		copy(dAtA[i:], m.ProxyContractHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProxyContractHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PeggyId) > 0 {
		i -= len(m.PeggyId)
		copy(dAtA[i:], m.PeggyId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PeggyId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeggyBootstrapProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggyBootstrapProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggyBootstrapProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.BootstrapValsetNonce) > 0 {
		i -= len(m.BootstrapValsetNonce)
		copy(dAtA[i:], m.BootstrapValsetNonce)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.BootstrapValsetNonce)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StartThreshold) > 0 {
		i -= len(m.StartThreshold)
		copy(dAtA[i:], m.StartThreshold)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.StartThreshold)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LogicContractHash) > 0 {
		i -= len(m.LogicContractHash)
		copy(dAtA[i:], m.LogicContractHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProxyContractAddress) > 0 {
		i -= len(m.ProxyContractAddress)
		copy(dAtA[i:], m.ProxyContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProxyContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProxyContractHash) > 0 {
		i -= len(m.ProxyContractHash)
		copy(dAtA[i:], m.ProxyContractHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProxyContractHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PeggyId) > 0 {
		i -= len(m.PeggyId)
		copy(dAtA[i:], m.PeggyId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PeggyId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeggyUpgradeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggyUpgradeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggyUpgradeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogicContractHash) > 0 {
		i -= len(m.LogicContractHash)
		copy(dAtA[i:], m.LogicContractHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeggyUpgradeProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeggyUpgradeProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeggyUpgradeProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogicContractHash) > 0 {
		i -= len(m.LogicContractHash)
		copy(dAtA[i:], m.LogicContractHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.LogicContractHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PeggyBootstrapProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PeggyId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ProxyContractHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ProxyContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.StartThreshold)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.BootstrapValsetNonce)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *PeggyBootstrapProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PeggyId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ProxyContractHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ProxyContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.StartThreshold)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.BootstrapValsetNonce)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *PeggyUpgradeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *PeggyUpgradeProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PeggyBootstrapProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggyBootstrapProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggyBootstrapProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapValsetNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapValsetNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeggyBootstrapProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggyBootstrapProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggyBootstrapProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapValsetNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapValsetNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeggyUpgradeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggyUpgradeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggyUpgradeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeggyUpgradeProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeggyUpgradeProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeggyUpgradeProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
