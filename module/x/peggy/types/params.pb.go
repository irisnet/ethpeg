// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	PeggyId              string `protobuf:"bytes,1,opt,name=peggy_id,json=peggyId,proto3" json:"peggy_id,omitempty"`
	ProxyContractHash    string `protobuf:"bytes,2,opt,name=proxy_contract_hash,json=proxyContractHash,proto3" json:"proxy_contract_hash,omitempty"`
	ProxyContractAddress string `protobuf:"bytes,3,opt,name=proxy_contract_address,json=proxyContractAddress,proto3" json:"proxy_contract_address,omitempty"`
	LogicContractHash    string `protobuf:"bytes,4,opt,name=logic_contract_hash,json=logicContractHash,proto3" json:"logic_contract_hash,omitempty"`
	LogicContractAddress string `protobuf:"bytes,5,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty"`
	Version              string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	StartThreshold       uint64 `protobuf:"varint,7,opt,name=start_threshold,json=startThreshold,proto3" json:"start_threshold,omitempty"`
	BridgeChainId        uint64 `protobuf:"varint,8,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	BootstrapValsetNonce uint64 `protobuf:"varint,9,opt,name=bootstrap_valset_nonce,json=bootstrapValsetNonce,proto3" json:"bootstrap_valset_nonce,omitempty"`
	BatchInterval        uint64 `protobuf:"varint,10,opt,name=batch_interval,json=batchInterval,proto3" json:"batch_interval,omitempty"`
	BatchNum             uint64 `protobuf:"varint,11,opt,name=batch_num,json=batchNum,proto3" json:"batch_num,omitempty"`
	ValsetInterval       uint64 `protobuf:"varint,12,opt,name=valset_interval,json=valsetInterval,proto3" json:"valset_interval,omitempty"`
	ValsetChange         uint64 `protobuf:"varint,13,opt,name=valset_change,json=valsetChange,proto3" json:"valset_change,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6514bc7697a79017, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPeggyId() string {
	if m != nil {
		return m.PeggyId
	}
	return ""
}

func (m *Params) GetProxyContractHash() string {
	if m != nil {
		return m.ProxyContractHash
	}
	return ""
}

func (m *Params) GetProxyContractAddress() string {
	if m != nil {
		return m.ProxyContractAddress
	}
	return ""
}

func (m *Params) GetLogicContractHash() string {
	if m != nil {
		return m.LogicContractHash
	}
	return ""
}

func (m *Params) GetLogicContractAddress() string {
	if m != nil {
		return m.LogicContractAddress
	}
	return ""
}

func (m *Params) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Params) GetStartThreshold() uint64 {
	if m != nil {
		return m.StartThreshold
	}
	return 0
}

func (m *Params) GetBridgeChainId() uint64 {
	if m != nil {
		return m.BridgeChainId
	}
	return 0
}

func (m *Params) GetBootstrapValsetNonce() uint64 {
	if m != nil {
		return m.BootstrapValsetNonce
	}
	return 0
}

func (m *Params) GetBatchInterval() uint64 {
	if m != nil {
		return m.BatchInterval
	}
	return 0
}

func (m *Params) GetBatchNum() uint64 {
	if m != nil {
		return m.BatchNum
	}
	return 0
}

func (m *Params) GetValsetInterval() uint64 {
	if m != nil {
		return m.ValsetInterval
	}
	return 0
}

func (m *Params) GetValsetChange() uint64 {
	if m != nil {
		return m.ValsetChange
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "peggy.v1.Params")
}

func init() { proto.RegisterFile("peggy/v1/params.proto", fileDescriptor_6514bc7697a79017) }

var fileDescriptor_6514bc7697a79017 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xbf, 0x8e, 0x13, 0x31,
	0x10, 0xc6, 0xb3, 0x10, 0xf2, 0xc7, 0x5c, 0xee, 0xc4, 0x12, 0x90, 0x01, 0x69, 0x15, 0x81, 0x80,
	0x6b, 0xc8, 0x72, 0x82, 0x8a, 0x0e, 0xd2, 0x10, 0x8a, 0x13, 0x3a, 0x21, 0x0a, 0x1a, 0xcb, 0x6b,
	0x5b, 0xf6, 0x4a, 0xbb, 0xf6, 0xca, 0x76, 0x56, 0x97, 0x8e, 0x47, 0xe0, 0x31, 0x78, 0x14, 0xca,
	0x2b, 0x29, 0x28, 0x50, 0xf2, 0x22, 0x27, 0x8f, 0x37, 0x91, 0x92, 0x6e, 0xe7, 0xf7, 0x7d, 0x33,
	0xdf, 0x8e, 0x35, 0xe8, 0x51, 0x23, 0xa4, 0x5c, 0xe7, 0xed, 0x45, 0xde, 0x50, 0x4b, 0x6b, 0x37,
	0x6f, 0xac, 0xf1, 0x26, 0x1d, 0x01, 0x9e, 0xb7, 0x17, 0x4f, 0xa7, 0xd2, 0x48, 0x03, 0x30, 0x0f,
	0x5f, 0x51, 0x7f, 0xfe, 0xbb, 0x8f, 0x06, 0x5f, 0xa1, 0x21, 0x7d, 0x82, 0xa2, 0x99, 0x94, 0x1c,
	0x27, 0xb3, 0xe4, 0x7c, 0x7c, 0x35, 0x84, 0x7a, 0xc9, 0xd3, 0x39, 0x7a, 0xd8, 0x58, 0x73, 0xbd,
	0x26, 0xcc, 0x68, 0x6f, 0x29, 0xf3, 0x44, 0x51, 0xa7, 0xf0, 0x1d, 0x70, 0x3d, 0x00, 0x69, 0xd1,
	0x29, 0x9f, 0xa9, 0x53, 0xe9, 0x7b, 0xf4, 0xf8, 0xc8, 0x4f, 0x39, 0xb7, 0xc2, 0x39, 0x7c, 0x17,
	0x5a, 0xa6, 0x07, 0x2d, 0x1f, 0xa3, 0x16, 0x52, 0x2a, 0x23, 0x4b, 0x76, 0x94, 0xd2, 0x8f, 0x29,
	0x20, 0x1d, 0xa7, 0x1c, 0xf9, 0x77, 0x29, 0xf7, 0x62, 0xca, 0x41, 0xcb, 0x2e, 0x05, 0xa3, 0x61,
	0x2b, 0xac, 0x2b, 0x8d, 0xc6, 0x83, 0xb8, 0x65, 0x57, 0xa6, 0xaf, 0xd1, 0x99, 0xf3, 0xd4, 0x7a,
	0xe2, 0x95, 0x15, 0x4e, 0x99, 0x8a, 0xe3, 0xe1, 0x2c, 0x39, 0xef, 0x5f, 0x9d, 0x02, 0xfe, 0xb6,
	0xa3, 0xe9, 0x2b, 0x74, 0x56, 0xd8, 0x92, 0x4b, 0x41, 0x98, 0xa2, 0xa5, 0x0e, 0x0f, 0x36, 0x02,
	0xe3, 0x24, 0xe2, 0x45, 0xa0, 0x4b, 0x1e, 0x7e, 0xb0, 0x30, 0xc6, 0x3b, 0x6f, 0x69, 0x43, 0x5a,
	0x5a, 0x39, 0xe1, 0x89, 0x36, 0x9a, 0x09, 0x3c, 0x06, 0xfb, 0x74, 0xaf, 0x7e, 0x07, 0xf1, 0x32,
	0x68, 0xe9, 0x4b, 0x74, 0x5a, 0x50, 0xcf, 0x14, 0x29, 0xb5, 0x17, 0xb6, 0xa5, 0x15, 0x46, 0xdd,
	0xf0, 0x40, 0x97, 0x1d, 0x4c, 0x9f, 0xa1, 0x71, 0xb4, 0xe9, 0x55, 0x8d, 0xef, 0x83, 0x63, 0x04,
	0xe0, 0x72, 0x55, 0x87, 0x55, 0xba, 0xbc, 0xfd, 0x90, 0x93, 0xb8, 0x4a, 0xc4, 0xfb, 0x29, 0x2f,
	0xd0, 0xa4, 0x33, 0x32, 0x45, 0xb5, 0x14, 0x78, 0x02, 0xb6, 0x93, 0x08, 0x17, 0xc0, 0x3e, 0xf4,
	0x7f, 0xfe, 0x9b, 0xf5, 0x3e, 0x7d, 0xf9, 0xb3, 0xc9, 0x92, 0x9b, 0x4d, 0x96, 0xfc, 0xdf, 0x64,
	0xc9, 0xaf, 0x6d, 0xd6, 0xbb, 0xd9, 0x66, 0xbd, 0xbf, 0xdb, 0xac, 0xf7, 0xe3, 0xad, 0x2c, 0xbd,
	0x5a, 0x15, 0x73, 0x66, 0xea, 0x9c, 0x56, 0x5e, 0x09, 0xfa, 0x46, 0x0b, 0x9f, 0xc7, 0x8b, 0xac,
	0x0d, 0x5f, 0x55, 0x22, 0xbf, 0xee, 0x4a, 0xbf, 0x6e, 0x84, 0x2b, 0x06, 0x70, 0x7d, 0xef, 0x6e,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x64, 0x9d, 0x12, 0xb6, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValsetChange != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValsetChange))
		i--
		dAtA[i] = 0x68
	}
	if m.ValsetInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ValsetInterval))
		i--
		dAtA[i] = 0x60
	}
	if m.BatchNum != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BatchNum))
		i--
		dAtA[i] = 0x58
	}
	if m.BatchInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BatchInterval))
		i--
		dAtA[i] = 0x50
	}
	if m.BootstrapValsetNonce != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BootstrapValsetNonce))
		i--
		dAtA[i] = 0x48
	}
	if m.BridgeChainId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BridgeChainId))
		i--
		dAtA[i] = 0x40
	}
	if m.StartThreshold != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StartThreshold))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogicContractHash) > 0 {
		i -= len(m.LogicContractHash)
		copy(dAtA[i:], m.LogicContractHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LogicContractHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProxyContractAddress) > 0 {
		i -= len(m.ProxyContractAddress)
		copy(dAtA[i:], m.ProxyContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProxyContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProxyContractHash) > 0 {
		i -= len(m.ProxyContractHash)
		copy(dAtA[i:], m.ProxyContractHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProxyContractHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeggyId) > 0 {
		i -= len(m.PeggyId)
		copy(dAtA[i:], m.PeggyId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PeggyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeggyId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProxyContractHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProxyContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.LogicContractHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.StartThreshold != 0 {
		n += 1 + sovParams(uint64(m.StartThreshold))
	}
	if m.BridgeChainId != 0 {
		n += 1 + sovParams(uint64(m.BridgeChainId))
	}
	if m.BootstrapValsetNonce != 0 {
		n += 1 + sovParams(uint64(m.BootstrapValsetNonce))
	}
	if m.BatchInterval != 0 {
		n += 1 + sovParams(uint64(m.BatchInterval))
	}
	if m.BatchNum != 0 {
		n += 1 + sovParams(uint64(m.BatchNum))
	}
	if m.ValsetInterval != 0 {
		n += 1 + sovParams(uint64(m.ValsetInterval))
	}
	if m.ValsetChange != 0 {
		n += 1 + sovParams(uint64(m.ValsetChange))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartThreshold", wireType)
			}
			m.StartThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			m.BridgeChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapValsetNonce", wireType)
			}
			m.BootstrapValsetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootstrapValsetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchInterval", wireType)
			}
			m.BatchInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNum", wireType)
			}
			m.BatchNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetInterval", wireType)
			}
			m.ValsetInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetChange", wireType)
			}
			m.ValsetChange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetChange |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
