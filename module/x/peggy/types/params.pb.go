// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peggy/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	PeggyId              string `protobuf:"bytes,1,opt,name=peggy_id,json=peggyId,proto3" json:"peggy_id,omitempty"`
	ProxyContractHash    string `protobuf:"bytes,2,opt,name=proxy_contract_hash,json=proxyContractHash,proto3" json:"proxy_contract_hash,omitempty"`
	ProxyContractAddress string `protobuf:"bytes,3,opt,name=proxy_contract_address,json=proxyContractAddress,proto3" json:"proxy_contract_address,omitempty"`
	LogicContractHash    string `protobuf:"bytes,4,opt,name=logic_contract_hash,json=logicContractHash,proto3" json:"logic_contract_hash,omitempty"`
	LogicContractAddress string `protobuf:"bytes,5,opt,name=logic_contract_address,json=logicContractAddress,proto3" json:"logic_contract_address,omitempty"`
	StartThreshold       string `protobuf:"bytes,6,opt,name=start_threshold,json=startThreshold,proto3" json:"start_threshold,omitempty"`
	BridgeChainId        string `protobuf:"bytes,7,opt,name=bridge_chain_id,json=bridgeChainId,proto3" json:"bridge_chain_id,omitempty"`
	BootstrapValsetNonce string `protobuf:"bytes,8,opt,name=bootstrap_valset_nonce,json=bootstrapValsetNonce,proto3" json:"bootstrap_valset_nonce,omitempty"`
	BatchTime            string `protobuf:"bytes,9,opt,name=batch_time,json=batchTime,proto3" json:"batch_time,omitempty"`
	BatchNum             string `protobuf:"bytes,10,opt,name=batch_num,json=batchNum,proto3" json:"batch_num,omitempty"`
	UpdateValsetTime     string `protobuf:"bytes,11,opt,name=update_valset_time,json=updateValsetTime,proto3" json:"update_valset_time,omitempty"`
	UpdateValsetChange   string `protobuf:"bytes,12,opt,name=update_valset_change,json=updateValsetChange,proto3" json:"update_valset_change,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6514bc7697a79017, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPeggyId() string {
	if m != nil {
		return m.PeggyId
	}
	return ""
}

func (m *Params) GetProxyContractHash() string {
	if m != nil {
		return m.ProxyContractHash
	}
	return ""
}

func (m *Params) GetProxyContractAddress() string {
	if m != nil {
		return m.ProxyContractAddress
	}
	return ""
}

func (m *Params) GetLogicContractHash() string {
	if m != nil {
		return m.LogicContractHash
	}
	return ""
}

func (m *Params) GetLogicContractAddress() string {
	if m != nil {
		return m.LogicContractAddress
	}
	return ""
}

func (m *Params) GetStartThreshold() string {
	if m != nil {
		return m.StartThreshold
	}
	return ""
}

func (m *Params) GetBridgeChainId() string {
	if m != nil {
		return m.BridgeChainId
	}
	return ""
}

func (m *Params) GetBootstrapValsetNonce() string {
	if m != nil {
		return m.BootstrapValsetNonce
	}
	return ""
}

func (m *Params) GetBatchTime() string {
	if m != nil {
		return m.BatchTime
	}
	return ""
}

func (m *Params) GetBatchNum() string {
	if m != nil {
		return m.BatchNum
	}
	return ""
}

func (m *Params) GetUpdateValsetTime() string {
	if m != nil {
		return m.UpdateValsetTime
	}
	return ""
}

func (m *Params) GetUpdateValsetChange() string {
	if m != nil {
		return m.UpdateValsetChange
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "peggy.v1.Params")
}

func init() { proto.RegisterFile("peggy/v1/params.proto", fileDescriptor_6514bc7697a79017) }

var fileDescriptor_6514bc7697a79017 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0x28, 0xbd, 0xd6, 0xfc, 0x39, 0x30, 0x05, 0x19, 0x10, 0xd1, 0x89, 0x01, 0x18,
	0xa0, 0xb9, 0x13, 0x4c, 0x6c, 0xd0, 0x85, 0x63, 0x38, 0x21, 0x74, 0x62, 0x60, 0xb1, 0x1c, 0xdb,
	0xb2, 0x23, 0x25, 0x71, 0x64, 0xbf, 0xa9, 0xae, 0x1b, 0x1f, 0x81, 0x91, 0x8f, 0xc4, 0x78, 0x23,
	0x03, 0x03, 0x6a, 0xbf, 0x08, 0xca, 0xeb, 0x06, 0x5d, 0xb3, 0xe5, 0x7d, 0x7e, 0xbf, 0xd7, 0x8f,
	0x15, 0x99, 0x3c, 0x68, 0xb4, 0x31, 0xeb, 0x6c, 0x75, 0x92, 0x35, 0xc2, 0x8b, 0x2a, 0x2c, 0x1a,
	0xef, 0xc0, 0xd1, 0x29, 0xc6, 0x8b, 0xd5, 0xc9, 0xe3, 0xb9, 0x71, 0xc6, 0x61, 0x98, 0x75, 0x5f,
	0x91, 0x3f, 0xfb, 0x39, 0x26, 0x93, 0xcf, 0xb8, 0x40, 0x1f, 0x91, 0x28, 0xf3, 0x42, 0xb1, 0xe4,
	0x28, 0x79, 0x39, 0xfb, 0x72, 0x80, 0xf3, 0xa9, 0xa2, 0x0b, 0x72, 0xbf, 0xf1, 0xee, 0x62, 0xcd,
	0xa5, 0xab, 0xc1, 0x0b, 0x09, 0xdc, 0x8a, 0x60, 0xd9, 0x35, 0xb4, 0xee, 0x21, 0x5a, 0xee, 0xc8,
	0x47, 0x11, 0x2c, 0x7d, 0x4b, 0x1e, 0x0e, 0x7c, 0xa1, 0x94, 0xd7, 0x21, 0xb0, 0xeb, 0xb8, 0x32,
	0xdf, 0x5b, 0x79, 0x1f, 0x59, 0xd7, 0x52, 0x3a, 0x53, 0xc8, 0x41, 0xcb, 0x38, 0xb6, 0x20, 0x1a,
	0xb6, 0x0c, 0xfc, 0xbe, 0xe5, 0x46, 0x6c, 0xd9, 0x5b, 0xe9, 0x5b, 0x5e, 0x90, 0xc3, 0x00, 0xc2,
	0x03, 0x07, 0xeb, 0x75, 0xb0, 0xae, 0x54, 0x6c, 0x82, 0xfa, 0x1d, 0x8c, 0xcf, 0xfb, 0x94, 0x3e,
	0x27, 0x87, 0xb9, 0x2f, 0x94, 0xd1, 0x5c, 0x5a, 0x51, 0xd4, 0xdd, 0x6f, 0x39, 0x40, 0xf1, 0x76,
	0x8c, 0x97, 0x5d, 0x7a, 0xaa, 0xba, 0x6b, 0xe4, 0xce, 0x41, 0x00, 0x2f, 0x1a, 0xbe, 0x12, 0x65,
	0xd0, 0xc0, 0x6b, 0x57, 0x4b, 0xcd, 0xa6, 0xf1, 0x1a, 0xff, 0xe9, 0x57, 0x84, 0x67, 0x1d, 0xa3,
	0x4f, 0x09, 0xc9, 0x05, 0x48, 0xcb, 0xa1, 0xa8, 0x34, 0x9b, 0xa1, 0x39, 0xc3, 0xe4, 0xbc, 0xa8,
	0x34, 0x7d, 0x42, 0xe2, 0xc0, 0xeb, 0xb6, 0x62, 0x04, 0xe9, 0x14, 0x83, 0xb3, 0xb6, 0xa2, 0xaf,
	0x08, 0x6d, 0x1b, 0x25, 0x40, 0xf7, 0x75, 0x78, 0xc6, 0x4d, 0xb4, 0xee, 0x46, 0x12, 0xab, 0xf0,
	0xa8, 0x63, 0x32, 0xdf, 0xb7, 0xa5, 0x15, 0xb5, 0xd1, 0xec, 0x16, 0xfa, 0xf4, 0xaa, 0xbf, 0x44,
	0xf2, 0x6e, 0xfc, 0xfd, 0xcf, 0xd1, 0xe8, 0xc3, 0xa7, 0x5f, 0x9b, 0x34, 0xb9, 0xdc, 0xa4, 0xc9,
	0xdf, 0x4d, 0x9a, 0xfc, 0xd8, 0xa6, 0xa3, 0xcb, 0x6d, 0x3a, 0xfa, 0xbd, 0x4d, 0x47, 0xdf, 0x8e,
	0x4d, 0x01, 0xb6, 0xcd, 0x17, 0xd2, 0x55, 0x99, 0x28, 0xc1, 0x6a, 0xf1, 0xba, 0xd6, 0x90, 0xc5,
	0x17, 0x58, 0x39, 0xd5, 0x96, 0x3a, 0xbb, 0xd8, 0x8d, 0xb0, 0x6e, 0x74, 0xc8, 0x27, 0xf8, 0xda,
	0xde, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x62, 0x4b, 0xfb, 0xd4, 0xa6, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdateValsetChange) > 0 {
		i -= len(m.UpdateValsetChange)
		copy(dAtA[i:], m.UpdateValsetChange)
		i = encodeVarintParams(dAtA, i, uint64(len(m.UpdateValsetChange)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UpdateValsetTime) > 0 {
		i -= len(m.UpdateValsetTime)
		copy(dAtA[i:], m.UpdateValsetTime)
		i = encodeVarintParams(dAtA, i, uint64(len(m.UpdateValsetTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.BatchNum) > 0 {
		i -= len(m.BatchNum)
		copy(dAtA[i:], m.BatchNum)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BatchNum)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BatchTime) > 0 {
		i -= len(m.BatchTime)
		copy(dAtA[i:], m.BatchTime)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BatchTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BootstrapValsetNonce) > 0 {
		i -= len(m.BootstrapValsetNonce)
		copy(dAtA[i:], m.BootstrapValsetNonce)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BootstrapValsetNonce)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BridgeChainId) > 0 {
		i -= len(m.BridgeChainId)
		copy(dAtA[i:], m.BridgeChainId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BridgeChainId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartThreshold) > 0 {
		i -= len(m.StartThreshold)
		copy(dAtA[i:], m.StartThreshold)
		i = encodeVarintParams(dAtA, i, uint64(len(m.StartThreshold)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogicContractAddress) > 0 {
		i -= len(m.LogicContractAddress)
		copy(dAtA[i:], m.LogicContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LogicContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LogicContractHash) > 0 {
		i -= len(m.LogicContractHash)
		copy(dAtA[i:], m.LogicContractHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.LogicContractHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProxyContractAddress) > 0 {
		i -= len(m.ProxyContractAddress)
		copy(dAtA[i:], m.ProxyContractAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProxyContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProxyContractHash) > 0 {
		i -= len(m.ProxyContractHash)
		copy(dAtA[i:], m.ProxyContractHash)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProxyContractHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeggyId) > 0 {
		i -= len(m.PeggyId)
		copy(dAtA[i:], m.PeggyId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PeggyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PeggyId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProxyContractHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProxyContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.LogicContractHash)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.LogicContractAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.StartThreshold)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BridgeChainId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BootstrapValsetNonce)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BatchTime)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BatchNum)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.UpdateValsetTime)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.UpdateValsetChange)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeggyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeggyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootstrapValsetNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootstrapValsetNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateValsetTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateValsetTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateValsetChange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateValsetChange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
